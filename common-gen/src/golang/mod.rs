pub use delete::*;
pub use get_id::*;
pub use get_list::*;
pub use patch_id::*;
pub use patch_id_body::*;
pub use post::*;
pub use post_id::*;
pub use put::*;
pub use put_id::*;
pub use put_id_body::*;

mod delete;
mod get_id;
mod get_list;
mod patch_id;
mod patch_id_body;
mod post;
mod post_id;
mod put;
mod put_id;
mod put_id_body;

pub const TERRAFORM_RESOURCE: &str = r#"// Generated by satounki/common-gen

package provider

import "github.com/hashicorp/terraform-plugin-framework/types"

// {{ doc }}
type {{ name|camel }}ResourceData struct {
    {{ members }}
}
"#;

pub const TERRAFORM_INTERFACE: &str = r#"// Generated by satounki/common-gen

package provider

import (
	"context"
	"fmt"
	"net/http"
	{{ import }}

	"github.com/hashicorp/terraform-plugin-framework/resource"

	"github.com/hashicorp/terraform-plugin-framework/path"
)

var (
	_ resource.Resource                = &{{ name | camel }}Resource{}
	_ resource.ResourceWithConfigure   = &{{ name | camel }}Resource{}
	_ resource.ResourceWithImportState = &{{ name | camel }}Resource{}
)

func New{{ name | upper_camel }}Resource() resource.Resource {
	return &{{ name | camel }}Resource{}
}

type {{ name | camel }}Resource struct {
	client *satounki.API
}

func (r *{{ name | camel }}Resource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_{{ name | snake }}"
}

func (r *{{ name | camel }}Resource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(satounki.API)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Data Source Configure Type",
			fmt.Sprintf("Expected *satounki.API, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = &client
}

func (r *{{ name | camel }}Resource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	// Retrieve values from plan
	var plan {{ name | camel }}ResourceData
	diags := req.Plan.Get(ctx, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	body := plan.PostRequest()

	response, _, err := r.client.{{api_prefix}}{{ name | upper_camel }}Post({% if has_post_id %}plan.{{identifier}}.ValueString(), {% endif %}body)
	if err != nil {
		resp.Diagnostics.AddError("Error creating {{ name | title }}",
			err.Error(),
		)

		return
	}

	plan.PostResponse(response)

	// Set state to fully populated data
	diags = resp.State.Set(ctx, plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
}

func (r *{{ name | camel }}Resource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	// Get current state
	var state {{ name | camel }}ResourceData
	diags := req.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	response, errorResponse, err := r.client.{{api_prefix}}{{ name | upper_camel }}Get(state.{{ identifier }}.ValueString())
	if err != nil {
		if errorResponse.Code == http.StatusNotFound {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error reading {{ name | title }}",
				err.Error(),
			)
		}

		return
	}

	state.GetResponse(response)

	// Set refreshed state
	diags = resp.State.Set(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
}

func (r *{{ name | camel }}Resource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	// Retrieve values from plan
	var plan {{ name | camel }}ResourceData
	diags := req.Plan.Get(ctx, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	body := plan.PutRequest()

	response, _, err := r.client.{{api_prefix}}{{ name | upper_camel }}Put(plan.{{ identifier }}.ValueString(), body)
	if err != nil {
		resp.Diagnostics.AddError("Error updating {{ name | title }}",
			err.Error(),
		)

		return
	}

	plan.PutResponse(response)

	diags = resp.State.Set(ctx, plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
}

func (r *{{ name | camel }}Resource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	// Retrieve values from state
	var state {{ name | camel }}ResourceData
	diags := req.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	err := r.client.{{api_prefix}}{{ name | upper_camel }}Delete(state.{{ identifier }}.ValueString())
	if err != nil {
		resp.Diagnostics.AddError("Client Error",
			err.Error(),
		)

		return
	}

	resp.State.RemoveResource(ctx)
}

func (r *{{ name | camel }}Resource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	// Retrieve import ID and save to id attribute
	resource.ImportStatePassthroughID(ctx, path.Root("{{ identifier | camel }}"), req, resp)
}
"#;
