use anyhow::bail;
use anyhow::Result;
use api::Ops;
use api::Route;
#[allow(unused_imports)]
use common::*;
use convert_case::Case;
use convert_case::Casing;
use minijinja::context;
use minijinja::Environment;

use crate::api::platform_routes;
use crate::api::public_routes;
use crate::golang::DELETE_TEMPLATE_GO;
use crate::golang::GET_ID_TEMPLATE_GO;
use crate::golang::GET_TEMPLATE_GO;
use crate::golang::PATCH_ID_BODY_TEMPLATE_GO;
use crate::golang::PATCH_ID_TEMPLATE_GO;
use crate::golang::POST_ID_TEMPLATE_GO;
use crate::golang::POST_TEMPLATE_GO;
use crate::golang::PUT_ID_BODY_TEMPLATE_GO;
use crate::golang::PUT_ID_TEMPLATE_GO;
use crate::golang::PUT_TEMPLATE_GO;
use crate::golang::TERRAFORM_INTERFACE;
use crate::golang::TERRAFORM_RESOURCE;
use crate::terraform::platform_resources;
use crate::terraform::resources;
use crate::terraform::Resource;
use crate::typescript::DELETE_TEMPLATE_TS;
use crate::typescript::GET_ID_TEMPLATE_TS;
use crate::typescript::GET_TEMPLATE_TS;
use crate::typescript::PATCH_ID_BODY_TEMPLATE_TS;
use crate::typescript::PATCH_ID_TEMPLATE_TS;
use crate::typescript::POST_ID_TEMPLATE_TS;
use crate::typescript::POST_TEMPLATE_TS;
use crate::typescript::PUT_ID_BODY_TEMPLATE_TS;
use crate::typescript::PUT_ID_TEMPLATE_TS;
use crate::typescript::PUT_TEMPLATE_TS;
use crate::typescript::TS_TEMPLATE;

mod api;
mod golang;
mod terraform;
mod typescript;

fn camelify(
    _state: &minijinja::State,
    value: String,
) -> std::result::Result<String, minijinja::Error> {
    Ok(value.to_case(Case::Camel))
}

fn upper_camelify(
    _state: &minijinja::State,
    value: String,
) -> std::result::Result<String, minijinja::Error> {
    Ok(value.to_case(Case::UpperCamel))
}

fn snakeify(
    _state: &minijinja::State,
    value: String,
) -> std::result::Result<String, minijinja::Error> {
    Ok(value.to_case(Case::Snake))
}

fn titleify(
    _state: &minijinja::State,
    value: String,
) -> std::result::Result<String, minijinja::Error> {
    Ok(value.to_case(Case::Title))
}

fn generate_terraform(resources: Vec<Resource>, output_path: &str) -> Result<()> {
    let mut env = Environment::new();
    env.add_template("tf", TERRAFORM_RESOURCE)?;
    env.add_template("interface", TERRAFORM_INTERFACE)?;
    env.add_filter("camel", camelify);
    env.add_filter("upper_camel", upper_camelify);
    env.add_filter("snake", snakeify);
    env.add_filter("title", titleify);
    let tf = env.get_template("tf")?;
    let interface = env.get_template("interface")?;

    let import = if output_path.contains("satounkiplatform") {
        r#"satounki "satounki-platform""#
    } else {
        r#""satounki""#
    };

    for resource in resources {
        let output = tf.render(context! {
            name => resource.name,
            members => resource.members.join("\n"),
            doc => resource.doc,
        })?;

        std::fs::write(
            format!("{output_path}/{}_resource_data.go", resource.name),
            output,
        )?;

        let output = interface.render(context! {
            name => resource.name,
            identifier => resource.identifier,
            api_prefix => resource.api_prefix,
            has_post_id => resource.has_post_id,
            has_custom_delete => resource.has_custom_delete,
            import
        })?;

        std::fs::write(
            format!("{output_path}/{}_resource.generated.go", resource.name),
            output,
        )?;
    }

    Ok(())
}

fn generate_go(routes: Vec<Route>, output_path: &str) -> Result<()> {
    let mut env = Environment::new();
    env.add_template("post", POST_TEMPLATE_GO)?;
    env.add_template("post_id", POST_ID_TEMPLATE_GO)?;
    env.add_template("get_id", GET_ID_TEMPLATE_GO)?;
    env.add_template("get", GET_TEMPLATE_GO)?;
    env.add_template("put_id", PUT_ID_TEMPLATE_GO)?;
    env.add_template("put_id_body", PUT_ID_BODY_TEMPLATE_GO)?;
    env.add_template("put", PUT_TEMPLATE_GO)?;
    env.add_template("patch_id", PATCH_ID_TEMPLATE_GO)?;
    env.add_template("patch_id_body", PATCH_ID_BODY_TEMPLATE_GO)?;
    env.add_template("delete", DELETE_TEMPLATE_GO)?;

    let post = env.get_template("post")?;
    let post_id = env.get_template("post_id")?;
    let get_id = env.get_template("get_id")?;
    let get = env.get_template("get")?;
    let put = env.get_template("put")?;
    let put_id = env.get_template("put_id")?;
    let put_id_body = env.get_template("put_id_body")?;
    let patch_id = env.get_template("patch_id")?;
    let patch_id_body = env.get_template("patch_id_body")?;
    let delete = env.get_template("delete")?;

    let mut generated_api_client = vec![
        "// Generated by satounki/common-gen".to_string(),
        String::new(),
        "package satounki".to_string(),
        String::new(),
        r#"import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"log"
	"net/http"
)"#
        .to_string(),
    ];

    for route in routes {
        if !route.is_valid() {
            bail!(
                "route has declared ops but has not declared paths for those ops: {:?}",
                &route
            );
        }

        for op in route.ops {
            generated_api_client.push(match op {
                Ops::GetId => get_id.render(&route.context)?,
                Ops::Get => get.render(&route.context)?,
                Ops::Post => post.render(&route.context)?,
                Ops::PostId => post_id.render(&route.context)?,
                Ops::Put => put.render(&route.context)?,
                Ops::PutId => put_id.render(&route.context)?,
                Ops::PutIdBody => put_id_body.render(&route.context)?,
                Ops::PatchBody => patch_id_body.render(&route.context)?,
                Ops::PatchId => patch_id.render(&route.context)?,
                Ops::Delete => delete.render(&route.context)?,
            });
        }
    }

    let joined = generated_api_client.join("\n");

    std::fs::write(output_path, joined)?;

    Ok(())
}

fn tsify(
    _state: &minijinja::State,
    value: String,
) -> std::result::Result<String, minijinja::Error> {
    let s = value.as_str();
    Ok(s[0..1].to_lowercase() + &s[1..])
}

fn generate_ts() -> Result<()> {
    let mut env = Environment::new();
    env.add_template("ts", TS_TEMPLATE)?;

    env.add_template("post", POST_TEMPLATE_TS)?;
    env.add_template("post_id", POST_ID_TEMPLATE_TS)?;
    env.add_template("get_id", GET_ID_TEMPLATE_TS)?;
    env.add_template("get", GET_TEMPLATE_TS)?;
    env.add_template("put_id", PUT_ID_TEMPLATE_TS)?;
    env.add_template("put_id_body", PUT_ID_BODY_TEMPLATE_TS)?;
    env.add_template("put", PUT_TEMPLATE_TS)?;
    env.add_template("patch_id", PATCH_ID_TEMPLATE_TS)?;
    env.add_template("patch_id_body", PATCH_ID_BODY_TEMPLATE_TS)?;
    env.add_template("delete", DELETE_TEMPLATE_TS)?;
    env.add_filter("tsify", tsify);

    let ts = env.get_template("ts")?;

    let post = env.get_template("post")?;
    let post_id = env.get_template("post_id")?;
    let get_id = env.get_template("get_id")?;
    let get = env.get_template("get")?;
    let put_id = env.get_template("put_id")?;
    let put_id_body = env.get_template("put_id_body")?;
    let put = env.get_template("put")?;
    let patch_id = env.get_template("patch_id")?;
    let patch_id_body = env.get_template("patch_id_body")?;
    let delete = env.get_template("delete")?;

    let mut generated = vec![];

    for route in public_routes() {
        if !route.is_valid() {
            bail!(
                "route has declared ops but has not declared paths for those ops: {:?}",
                &route
            );
        }

        for op in route.ops {
            generated.push(match op {
                Ops::GetId => get_id.render(&route.context)?,
                Ops::Get => get.render(&route.context)?,
                Ops::Post => post.render(&route.context)?,
                Ops::PostId => post_id.render(&route.context)?,
                Ops::PutId => put_id.render(&route.context)?,
                Ops::Put => put.render(&route.context)?,
                Ops::PutIdBody => put_id_body.render(&route.context)?,
                Ops::PatchBody => patch_id_body.render(&route.context)?,
                Ops::PatchId => patch_id.render(&route.context)?,
                Ops::Delete => delete.render(&route.context)?,
            });
        }
    }

    let rendered = ts.render(context!(
        generated => generated.join("\n"),
        comment => "// Generated by satounki/common-gen"
    ))?;

    std::fs::write("./satounki-ts/api.generated.ts", rendered)?;

    Ok(())
}

macro_rules! write_public_schema {
    ( $( $kind:ty ),+ $(,)? ) => {
        $(
            paste::paste! {
                std::fs::write(
                    &format!("./json-v1/{}.json", stringify!([< $kind:snake >])),
                    serde_json::to_string_pretty(&schemars::schema_for!(common::$kind))?
                )?;
            }
        )+
    };
}

macro_rules! write_platform_schema {
    ( $( $kind:ty ),+ $(,)? ) => {
        $(
            paste::paste! {
                std::fs::write(
                    &format!("./json-platform/{}.json", stringify!([< $kind:snake >])),
                    serde_json::to_string_pretty(&schemars::schema_for!(common_platform::$kind))?
                )?;
            }
        )+
    };
}

fn main() -> Result<()> {
    write_platform_schema! {
        CompaniesGetResponse,
        CompanyGetResponse,
        CompanyPostRequest,
        CompanyPostResponse,
        CompanyPutRequest,
        CompanyPutResponse,
        ErrorResponse,
        PlatformTokenGetResponse,
        PlatformTokenPutResponse,
    }

    write_public_schema! {
        PoliciesGetResponse,
        PolicyGetResponse,
        PolicyNameGetResponse,
        PolicyPostRequest,
        PolicyPostResponse,
        PolicyPutRequest,
        PolicyPutResponse,
        SettingsAwsAccountGetResponse,
        SettingsAwsAccountPostRequest,
        SettingsAwsAccountPostResponse,
        SettingsAwsAccountPutRequest,
        SettingsAwsAccountPutResponse,
        SettingsAwsAccountsGetResponse,
        SettingsCloudflareAccountGetResponse,
        SettingsCloudflareAccountPostRequest,
        SettingsCloudflareAccountPostResponse,
        SettingsCloudflareAccountPutRequest,
        SettingsCloudflareAccountPutResponse,
        SettingsCloudflareAccountsGetResponse,
        SettingsGcpProjectGetResponse,
        SettingsGcpProjectPostRequest,
        SettingsGcpProjectPostResponse,
        SettingsGcpProjectPutRequest,
        SettingsGcpProjectPutResponse,
        SettingsGcpProjectsGetResponse,
        UserAliasesGetResponse,
        UserAliasesPostRequest,
        UserAliasesPostResponse,
        UserAliasesPutRequest,
        UserAliasesPutResponse,
        UserRolesGetResponse,
        UserRolesPostRequest,
        UserRolesPostResponse,
        UserRolesPutRequest,
        UserRolesPutResponse,
        UserTokenGetResponse,
        UserTokenPutResponse,
        ErrorResponse,
        RequestsGetQueryParams,
        RequestAliasGetResponse,
        RequestAliasPatchRequest,
        RequestPolicyPostRequest,
        RequestPolicyPostResponse,
        RequestsGetResponse,
    }

    generate_go(public_routes(), "./satounki-go/api.generated.go")?;
    generate_go(platform_routes(), "./satounki-platform-go/api.generated.go")?;
    generate_ts()?;
    generate_terraform(
        platform_resources(),
        "./terraform-providers/satounkiplatform/internal/provider",
    )?;
    generate_terraform(
        resources(),
        "./terraform-providers/satounki/internal/provider",
    )?;

    Ok(())
}
