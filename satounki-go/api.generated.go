// Generated by satounki/common-gen

package satounki

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"log"
	"net/http"
)

func (api *API) PoliciesGet() (PoliciesGetResponse, *ErrorResponse, error) {
	url := fmt.Sprintf("%s/policies", api.BaseURL)

	resp, err := api.httpClient.Get(url)
	if err != nil {
		return PoliciesGetResponse{}, nil, err
	}

	defer func(Body io.ReadCloser) {
		err := Body.Close()
		if err != nil {
			log.Fatal(err)
		}
	}(resp.Body)

	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return PoliciesGetResponse{}, nil, err
	}

	if resp.StatusCode >= http.StatusOK && resp.StatusCode <= http.StatusPartialContent {
		response, err := UnmarshalPoliciesGetResponse(respBody)
		if err != nil {
			return PoliciesGetResponse{}, nil, err
		}

		return response, nil, nil
	} else {
		response, err := UnmarshalErrorResponse(respBody)
		if err != nil {
			return PoliciesGetResponse{}, nil, err
		}

		return PoliciesGetResponse{}, &response, errors.New(response.Error)
	}
}

func (api *API) PolicyNameGet(id string) (PolicyNameGetResponse, *ErrorResponse, error) {
	url := fmt.Sprintf("%s/policy/name/%s", api.BaseURL, id)

	resp, err := api.httpClient.Get(url)
	if err != nil {
		return PolicyNameGetResponse{}, nil, err
	}

	defer func(Body io.ReadCloser) {
		err := Body.Close()
		if err != nil {
			log.Fatal(err)
		}
	}(resp.Body)

	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return PolicyNameGetResponse{}, nil, err
	}

	if resp.StatusCode >= http.StatusOK && resp.StatusCode <= http.StatusPartialContent {
		response, err := UnmarshalPolicyNameGetResponse(respBody)
		if err != nil {
			return PolicyNameGetResponse{}, nil, err
		}

		return response, nil, nil
	} else {
		response, err := UnmarshalErrorResponse(respBody)
		if err != nil {
			return PolicyNameGetResponse{}, nil, err
		}

		return PolicyNameGetResponse{}, &response, errors.New(response.Error)
	}
}

func (api *API) PolicyPost(body PolicyPostBody) (PolicyPostResponse, *ErrorResponse, error) {
	url := fmt.Sprintf("%s/policy", api.BaseURL)
	reqBody, err := json.Marshal(&body)
	if err != nil {
		return PolicyPostResponse{}, nil, err
	}

	resp, err := api.httpClient.Post(
		url,
		"application/json",
		bytes.NewBuffer(reqBody),
	)

	if err != nil {
		return PolicyPostResponse{}, nil, err
	}

	defer func(Body io.ReadCloser) {
		err := Body.Close()
		if err != nil {
			log.Fatal(err)
		}
	}(resp.Body)

	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return PolicyPostResponse{}, nil, err
	}

	if resp.StatusCode >= http.StatusOK && resp.StatusCode <= http.StatusPartialContent {
		response, err := UnmarshalPolicyPostResponse(respBody)
		if err != nil {
			return PolicyPostResponse{}, nil, err
		}

		return response, nil, nil
	} else {
		response, err := UnmarshalErrorResponse(respBody)
		if err != nil {
			return PolicyPostResponse{}, nil, err
		}

		return PolicyPostResponse{}, &response, errors.New(response.Error)
	}
}

func (api *API) PolicyPut(id string, body PolicyPutBody) (PolicyPutResponse, *ErrorResponse, error) {
	url := fmt.Sprintf("%s/policy/%s", api.BaseURL, id)
	reqBody, err := json.Marshal(&body)
	if err != nil {
		return PolicyPutResponse{}, nil, err
	}

	req, err := http.NewRequest(http.MethodPut,
		url,
		bytes.NewBuffer(reqBody),
	)
	if err != nil {
		return PolicyPutResponse{}, nil, err
	}

	req.Header.Add("Content-Type", "application/json")
	resp, err := api.httpClient.Do(req)
	if err != nil {
		return PolicyPutResponse{}, nil, err
	}

	defer func(Body io.ReadCloser) {
		err := Body.Close()
		if err != nil {
			log.Fatal(err)
		}
	}(resp.Body)

	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return PolicyPutResponse{}, nil, err
	}

	if resp.StatusCode >= http.StatusOK && resp.StatusCode <= http.StatusPartialContent {
		response, err := UnmarshalPolicyPutResponse(respBody)
		if err != nil {
			return PolicyPutResponse{}, nil, err
		}

		return response, nil, nil
	} else {
		response, err := UnmarshalErrorResponse(respBody)
		if err != nil {
			return PolicyPutResponse{}, nil, err
		}

		return PolicyPutResponse{}, &response, errors.New(response.Error)
	}
}

func (api *API) PolicyGet(id string) (PolicyGetResponse, *ErrorResponse, error) {
	url := fmt.Sprintf("%s/policy/%s", api.BaseURL, id)

	resp, err := api.httpClient.Get(url)
	if err != nil {
		return PolicyGetResponse{}, nil, err
	}

	defer func(Body io.ReadCloser) {
		err := Body.Close()
		if err != nil {
			log.Fatal(err)
		}
	}(resp.Body)

	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return PolicyGetResponse{}, nil, err
	}

	if resp.StatusCode >= http.StatusOK && resp.StatusCode <= http.StatusPartialContent {
		response, err := UnmarshalPolicyGetResponse(respBody)
		if err != nil {
			return PolicyGetResponse{}, nil, err
		}

		return response, nil, nil
	} else {
		response, err := UnmarshalErrorResponse(respBody)
		if err != nil {
			return PolicyGetResponse{}, nil, err
		}

		return PolicyGetResponse{}, &response, errors.New(response.Error)
	}
}

func (api *API) PolicyDelete(id string) error {
	url := fmt.Sprintf("%s/policy/%s", api.BaseURL, id)
	req, err := http.NewRequest(http.MethodDelete, url, nil)
	if err != nil {
		return err
	}

	resp, err := api.httpClient.Do(req)
	if err != nil {
		return err
	}

	defer func(Body io.ReadCloser) {
		err := Body.Close()
		if err != nil {
			log.Fatal(err)
		}
	}(resp.Body)

	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return err
	}

	if resp.StatusCode >= http.StatusOK && resp.StatusCode <= http.StatusPartialContent {
		return nil
	} else {
		response, err := UnmarshalErrorResponse(respBody)
		if err != nil {
			return err
		}

		return errors.New(response.Error)
	}
}

func (api *API) SettingsAwsAccountsGet() (SettingsAwsAccountsGetResponse, *ErrorResponse, error) {
	url := fmt.Sprintf("%s/settings/aws-accounts", api.BaseURL)

	resp, err := api.httpClient.Get(url)
	if err != nil {
		return SettingsAwsAccountsGetResponse{}, nil, err
	}

	defer func(Body io.ReadCloser) {
		err := Body.Close()
		if err != nil {
			log.Fatal(err)
		}
	}(resp.Body)

	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return SettingsAwsAccountsGetResponse{}, nil, err
	}

	if resp.StatusCode >= http.StatusOK && resp.StatusCode <= http.StatusPartialContent {
		response, err := UnmarshalSettingsAwsAccountsGetResponse(respBody)
		if err != nil {
			return SettingsAwsAccountsGetResponse{}, nil, err
		}

		return response, nil, nil
	} else {
		response, err := UnmarshalErrorResponse(respBody)
		if err != nil {
			return SettingsAwsAccountsGetResponse{}, nil, err
		}

		return SettingsAwsAccountsGetResponse{}, &response, errors.New(response.Error)
	}
}

func (api *API) SettingsCloudflareAccountsGet() (SettingsCloudflareAccountsGetResponse, *ErrorResponse, error) {
	url := fmt.Sprintf("%s/settings/cloudflare-accounts", api.BaseURL)

	resp, err := api.httpClient.Get(url)
	if err != nil {
		return SettingsCloudflareAccountsGetResponse{}, nil, err
	}

	defer func(Body io.ReadCloser) {
		err := Body.Close()
		if err != nil {
			log.Fatal(err)
		}
	}(resp.Body)

	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return SettingsCloudflareAccountsGetResponse{}, nil, err
	}

	if resp.StatusCode >= http.StatusOK && resp.StatusCode <= http.StatusPartialContent {
		response, err := UnmarshalSettingsCloudflareAccountsGetResponse(respBody)
		if err != nil {
			return SettingsCloudflareAccountsGetResponse{}, nil, err
		}

		return response, nil, nil
	} else {
		response, err := UnmarshalErrorResponse(respBody)
		if err != nil {
			return SettingsCloudflareAccountsGetResponse{}, nil, err
		}

		return SettingsCloudflareAccountsGetResponse{}, &response, errors.New(response.Error)
	}
}

func (api *API) SettingsGcpProjectsGet() (SettingsGcpProjectsGetResponse, *ErrorResponse, error) {
	url := fmt.Sprintf("%s/settings/gcp-projects", api.BaseURL)

	resp, err := api.httpClient.Get(url)
	if err != nil {
		return SettingsGcpProjectsGetResponse{}, nil, err
	}

	defer func(Body io.ReadCloser) {
		err := Body.Close()
		if err != nil {
			log.Fatal(err)
		}
	}(resp.Body)

	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return SettingsGcpProjectsGetResponse{}, nil, err
	}

	if resp.StatusCode >= http.StatusOK && resp.StatusCode <= http.StatusPartialContent {
		response, err := UnmarshalSettingsGcpProjectsGetResponse(respBody)
		if err != nil {
			return SettingsGcpProjectsGetResponse{}, nil, err
		}

		return response, nil, nil
	} else {
		response, err := UnmarshalErrorResponse(respBody)
		if err != nil {
			return SettingsGcpProjectsGetResponse{}, nil, err
		}

		return SettingsGcpProjectsGetResponse{}, &response, errors.New(response.Error)
	}
}

func (api *API) SettingsAwsAccountPost(body SettingsAwsAccountPostBody) (SettingsAwsAccountPostResponse, *ErrorResponse, error) {
	url := fmt.Sprintf("%s/settings/aws-account", api.BaseURL)
	reqBody, err := json.Marshal(&body)
	if err != nil {
		return SettingsAwsAccountPostResponse{}, nil, err
	}

	resp, err := api.httpClient.Post(
		url,
		"application/json",
		bytes.NewBuffer(reqBody),
	)

	if err != nil {
		return SettingsAwsAccountPostResponse{}, nil, err
	}

	defer func(Body io.ReadCloser) {
		err := Body.Close()
		if err != nil {
			log.Fatal(err)
		}
	}(resp.Body)

	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return SettingsAwsAccountPostResponse{}, nil, err
	}

	if resp.StatusCode >= http.StatusOK && resp.StatusCode <= http.StatusPartialContent {
		response, err := UnmarshalSettingsAwsAccountPostResponse(respBody)
		if err != nil {
			return SettingsAwsAccountPostResponse{}, nil, err
		}

		return response, nil, nil
	} else {
		response, err := UnmarshalErrorResponse(respBody)
		if err != nil {
			return SettingsAwsAccountPostResponse{}, nil, err
		}

		return SettingsAwsAccountPostResponse{}, &response, errors.New(response.Error)
	}
}

func (api *API) SettingsAwsAccountPut(id string, body SettingsAwsAccountPutBody) (SettingsAwsAccountPutResponse, *ErrorResponse, error) {
	url := fmt.Sprintf("%s/settings/aws-account/%s", api.BaseURL, id)
	reqBody, err := json.Marshal(&body)
	if err != nil {
		return SettingsAwsAccountPutResponse{}, nil, err
	}

	req, err := http.NewRequest(http.MethodPut,
		url,
		bytes.NewBuffer(reqBody),
	)
	if err != nil {
		return SettingsAwsAccountPutResponse{}, nil, err
	}

	req.Header.Add("Content-Type", "application/json")
	resp, err := api.httpClient.Do(req)
	if err != nil {
		return SettingsAwsAccountPutResponse{}, nil, err
	}

	defer func(Body io.ReadCloser) {
		err := Body.Close()
		if err != nil {
			log.Fatal(err)
		}
	}(resp.Body)

	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return SettingsAwsAccountPutResponse{}, nil, err
	}

	if resp.StatusCode >= http.StatusOK && resp.StatusCode <= http.StatusPartialContent {
		response, err := UnmarshalSettingsAwsAccountPutResponse(respBody)
		if err != nil {
			return SettingsAwsAccountPutResponse{}, nil, err
		}

		return response, nil, nil
	} else {
		response, err := UnmarshalErrorResponse(respBody)
		if err != nil {
			return SettingsAwsAccountPutResponse{}, nil, err
		}

		return SettingsAwsAccountPutResponse{}, &response, errors.New(response.Error)
	}
}

func (api *API) SettingsAwsAccountGet(id string) (SettingsAwsAccountGetResponse, *ErrorResponse, error) {
	url := fmt.Sprintf("%s/settings/aws-account/%s", api.BaseURL, id)

	resp, err := api.httpClient.Get(url)
	if err != nil {
		return SettingsAwsAccountGetResponse{}, nil, err
	}

	defer func(Body io.ReadCloser) {
		err := Body.Close()
		if err != nil {
			log.Fatal(err)
		}
	}(resp.Body)

	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return SettingsAwsAccountGetResponse{}, nil, err
	}

	if resp.StatusCode >= http.StatusOK && resp.StatusCode <= http.StatusPartialContent {
		response, err := UnmarshalSettingsAwsAccountGetResponse(respBody)
		if err != nil {
			return SettingsAwsAccountGetResponse{}, nil, err
		}

		return response, nil, nil
	} else {
		response, err := UnmarshalErrorResponse(respBody)
		if err != nil {
			return SettingsAwsAccountGetResponse{}, nil, err
		}

		return SettingsAwsAccountGetResponse{}, &response, errors.New(response.Error)
	}
}

func (api *API) SettingsAwsAccountDelete(id string) error {
	url := fmt.Sprintf("%s/settings/aws-account/%s", api.BaseURL, id)
	req, err := http.NewRequest(http.MethodDelete, url, nil)
	if err != nil {
		return err
	}

	resp, err := api.httpClient.Do(req)
	if err != nil {
		return err
	}

	defer func(Body io.ReadCloser) {
		err := Body.Close()
		if err != nil {
			log.Fatal(err)
		}
	}(resp.Body)

	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return err
	}

	if resp.StatusCode >= http.StatusOK && resp.StatusCode <= http.StatusPartialContent {
		return nil
	} else {
		response, err := UnmarshalErrorResponse(respBody)
		if err != nil {
			return err
		}

		return errors.New(response.Error)
	}
}

func (api *API) SettingsCloudflareAccountPost(body SettingsCloudflareAccountPostBody) (SettingsCloudflareAccountPostResponse, *ErrorResponse, error) {
	url := fmt.Sprintf("%s/settings/cloudflare-account", api.BaseURL)
	reqBody, err := json.Marshal(&body)
	if err != nil {
		return SettingsCloudflareAccountPostResponse{}, nil, err
	}

	resp, err := api.httpClient.Post(
		url,
		"application/json",
		bytes.NewBuffer(reqBody),
	)

	if err != nil {
		return SettingsCloudflareAccountPostResponse{}, nil, err
	}

	defer func(Body io.ReadCloser) {
		err := Body.Close()
		if err != nil {
			log.Fatal(err)
		}
	}(resp.Body)

	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return SettingsCloudflareAccountPostResponse{}, nil, err
	}

	if resp.StatusCode >= http.StatusOK && resp.StatusCode <= http.StatusPartialContent {
		response, err := UnmarshalSettingsCloudflareAccountPostResponse(respBody)
		if err != nil {
			return SettingsCloudflareAccountPostResponse{}, nil, err
		}

		return response, nil, nil
	} else {
		response, err := UnmarshalErrorResponse(respBody)
		if err != nil {
			return SettingsCloudflareAccountPostResponse{}, nil, err
		}

		return SettingsCloudflareAccountPostResponse{}, &response, errors.New(response.Error)
	}
}

func (api *API) SettingsCloudflareAccountPut(id string, body SettingsCloudflareAccountPutBody) (SettingsCloudflareAccountPutResponse, *ErrorResponse, error) {
	url := fmt.Sprintf("%s/settings/cloudflare-account/%s", api.BaseURL, id)
	reqBody, err := json.Marshal(&body)
	if err != nil {
		return SettingsCloudflareAccountPutResponse{}, nil, err
	}

	req, err := http.NewRequest(http.MethodPut,
		url,
		bytes.NewBuffer(reqBody),
	)
	if err != nil {
		return SettingsCloudflareAccountPutResponse{}, nil, err
	}

	req.Header.Add("Content-Type", "application/json")
	resp, err := api.httpClient.Do(req)
	if err != nil {
		return SettingsCloudflareAccountPutResponse{}, nil, err
	}

	defer func(Body io.ReadCloser) {
		err := Body.Close()
		if err != nil {
			log.Fatal(err)
		}
	}(resp.Body)

	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return SettingsCloudflareAccountPutResponse{}, nil, err
	}

	if resp.StatusCode >= http.StatusOK && resp.StatusCode <= http.StatusPartialContent {
		response, err := UnmarshalSettingsCloudflareAccountPutResponse(respBody)
		if err != nil {
			return SettingsCloudflareAccountPutResponse{}, nil, err
		}

		return response, nil, nil
	} else {
		response, err := UnmarshalErrorResponse(respBody)
		if err != nil {
			return SettingsCloudflareAccountPutResponse{}, nil, err
		}

		return SettingsCloudflareAccountPutResponse{}, &response, errors.New(response.Error)
	}
}

func (api *API) SettingsCloudflareAccountGet(id string) (SettingsCloudflareAccountGetResponse, *ErrorResponse, error) {
	url := fmt.Sprintf("%s/settings/cloudflare-account/%s", api.BaseURL, id)

	resp, err := api.httpClient.Get(url)
	if err != nil {
		return SettingsCloudflareAccountGetResponse{}, nil, err
	}

	defer func(Body io.ReadCloser) {
		err := Body.Close()
		if err != nil {
			log.Fatal(err)
		}
	}(resp.Body)

	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return SettingsCloudflareAccountGetResponse{}, nil, err
	}

	if resp.StatusCode >= http.StatusOK && resp.StatusCode <= http.StatusPartialContent {
		response, err := UnmarshalSettingsCloudflareAccountGetResponse(respBody)
		if err != nil {
			return SettingsCloudflareAccountGetResponse{}, nil, err
		}

		return response, nil, nil
	} else {
		response, err := UnmarshalErrorResponse(respBody)
		if err != nil {
			return SettingsCloudflareAccountGetResponse{}, nil, err
		}

		return SettingsCloudflareAccountGetResponse{}, &response, errors.New(response.Error)
	}
}

func (api *API) SettingsCloudflareAccountDelete(id string) error {
	url := fmt.Sprintf("%s/settings/cloudflare-account/%s", api.BaseURL, id)
	req, err := http.NewRequest(http.MethodDelete, url, nil)
	if err != nil {
		return err
	}

	resp, err := api.httpClient.Do(req)
	if err != nil {
		return err
	}

	defer func(Body io.ReadCloser) {
		err := Body.Close()
		if err != nil {
			log.Fatal(err)
		}
	}(resp.Body)

	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return err
	}

	if resp.StatusCode >= http.StatusOK && resp.StatusCode <= http.StatusPartialContent {
		return nil
	} else {
		response, err := UnmarshalErrorResponse(respBody)
		if err != nil {
			return err
		}

		return errors.New(response.Error)
	}
}

func (api *API) SettingsGcpProjectPost(body SettingsGcpProjectPostBody) (SettingsGcpProjectPostResponse, *ErrorResponse, error) {
	url := fmt.Sprintf("%s/settings/gcp-project", api.BaseURL)
	reqBody, err := json.Marshal(&body)
	if err != nil {
		return SettingsGcpProjectPostResponse{}, nil, err
	}

	resp, err := api.httpClient.Post(
		url,
		"application/json",
		bytes.NewBuffer(reqBody),
	)

	if err != nil {
		return SettingsGcpProjectPostResponse{}, nil, err
	}

	defer func(Body io.ReadCloser) {
		err := Body.Close()
		if err != nil {
			log.Fatal(err)
		}
	}(resp.Body)

	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return SettingsGcpProjectPostResponse{}, nil, err
	}

	if resp.StatusCode >= http.StatusOK && resp.StatusCode <= http.StatusPartialContent {
		response, err := UnmarshalSettingsGcpProjectPostResponse(respBody)
		if err != nil {
			return SettingsGcpProjectPostResponse{}, nil, err
		}

		return response, nil, nil
	} else {
		response, err := UnmarshalErrorResponse(respBody)
		if err != nil {
			return SettingsGcpProjectPostResponse{}, nil, err
		}

		return SettingsGcpProjectPostResponse{}, &response, errors.New(response.Error)
	}
}

func (api *API) SettingsGcpProjectPut(id string, body SettingsGcpProjectPutBody) (SettingsGcpProjectPutResponse, *ErrorResponse, error) {
	url := fmt.Sprintf("%s/settings/gcp-project/%s", api.BaseURL, id)
	reqBody, err := json.Marshal(&body)
	if err != nil {
		return SettingsGcpProjectPutResponse{}, nil, err
	}

	req, err := http.NewRequest(http.MethodPut,
		url,
		bytes.NewBuffer(reqBody),
	)
	if err != nil {
		return SettingsGcpProjectPutResponse{}, nil, err
	}

	req.Header.Add("Content-Type", "application/json")
	resp, err := api.httpClient.Do(req)
	if err != nil {
		return SettingsGcpProjectPutResponse{}, nil, err
	}

	defer func(Body io.ReadCloser) {
		err := Body.Close()
		if err != nil {
			log.Fatal(err)
		}
	}(resp.Body)

	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return SettingsGcpProjectPutResponse{}, nil, err
	}

	if resp.StatusCode >= http.StatusOK && resp.StatusCode <= http.StatusPartialContent {
		response, err := UnmarshalSettingsGcpProjectPutResponse(respBody)
		if err != nil {
			return SettingsGcpProjectPutResponse{}, nil, err
		}

		return response, nil, nil
	} else {
		response, err := UnmarshalErrorResponse(respBody)
		if err != nil {
			return SettingsGcpProjectPutResponse{}, nil, err
		}

		return SettingsGcpProjectPutResponse{}, &response, errors.New(response.Error)
	}
}

func (api *API) SettingsGcpProjectGet(id string) (SettingsGcpProjectGetResponse, *ErrorResponse, error) {
	url := fmt.Sprintf("%s/settings/gcp-project/%s", api.BaseURL, id)

	resp, err := api.httpClient.Get(url)
	if err != nil {
		return SettingsGcpProjectGetResponse{}, nil, err
	}

	defer func(Body io.ReadCloser) {
		err := Body.Close()
		if err != nil {
			log.Fatal(err)
		}
	}(resp.Body)

	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return SettingsGcpProjectGetResponse{}, nil, err
	}

	if resp.StatusCode >= http.StatusOK && resp.StatusCode <= http.StatusPartialContent {
		response, err := UnmarshalSettingsGcpProjectGetResponse(respBody)
		if err != nil {
			return SettingsGcpProjectGetResponse{}, nil, err
		}

		return response, nil, nil
	} else {
		response, err := UnmarshalErrorResponse(respBody)
		if err != nil {
			return SettingsGcpProjectGetResponse{}, nil, err
		}

		return SettingsGcpProjectGetResponse{}, &response, errors.New(response.Error)
	}
}

func (api *API) SettingsGcpProjectDelete(id string) error {
	url := fmt.Sprintf("%s/settings/gcp-project/%s", api.BaseURL, id)
	req, err := http.NewRequest(http.MethodDelete, url, nil)
	if err != nil {
		return err
	}

	resp, err := api.httpClient.Do(req)
	if err != nil {
		return err
	}

	defer func(Body io.ReadCloser) {
		err := Body.Close()
		if err != nil {
			log.Fatal(err)
		}
	}(resp.Body)

	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return err
	}

	if resp.StatusCode >= http.StatusOK && resp.StatusCode <= http.StatusPartialContent {
		return nil
	} else {
		response, err := UnmarshalErrorResponse(respBody)
		if err != nil {
			return err
		}

		return errors.New(response.Error)
	}
}

func (api *API) UserAliasesPost(id string, policy UserAliasesPostBody) (UserAliasesPostResponse, *ErrorResponse, error) {
	url := fmt.Sprintf("%s/user/%s/aliases", api.BaseURL, id)
	reqBody, err := json.Marshal(&policy)
	if err != nil {
		return UserAliasesPostResponse{}, nil, err
	}

	resp, err := api.httpClient.Post(
		url,
		"application/json",
		bytes.NewBuffer(reqBody),
	)

	if err != nil {
		return UserAliasesPostResponse{}, nil, err
	}

	defer func(Body io.ReadCloser) {
		err := Body.Close()
		if err != nil {
			log.Fatal(err)
		}
	}(resp.Body)

	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return UserAliasesPostResponse{}, nil, err
	}

	if resp.StatusCode >= http.StatusOK && resp.StatusCode <= http.StatusPartialContent {
		response, err := UnmarshalUserAliasesPostResponse(respBody)
		if err != nil {
			return UserAliasesPostResponse{}, nil, err
		}

		return response, nil, nil
	} else {
		response, err := UnmarshalErrorResponse(respBody)
		if err != nil {
			return UserAliasesPostResponse{}, nil, err
		}

		return UserAliasesPostResponse{}, &response, errors.New(response.Error)
	}
}

func (api *API) UserAliasesPut(id string, body UserAliasesPutBody) (UserAliasesPutResponse, *ErrorResponse, error) {
	url := fmt.Sprintf("%s/user/%s/aliases", api.BaseURL, id)
	reqBody, err := json.Marshal(&body)
	if err != nil {
		return UserAliasesPutResponse{}, nil, err
	}

	req, err := http.NewRequest(http.MethodPut,
		url,
		bytes.NewBuffer(reqBody),
	)
	if err != nil {
		return UserAliasesPutResponse{}, nil, err
	}

	req.Header.Add("Content-Type", "application/json")
	resp, err := api.httpClient.Do(req)
	if err != nil {
		return UserAliasesPutResponse{}, nil, err
	}

	defer func(Body io.ReadCloser) {
		err := Body.Close()
		if err != nil {
			log.Fatal(err)
		}
	}(resp.Body)

	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return UserAliasesPutResponse{}, nil, err
	}

	if resp.StatusCode >= http.StatusOK && resp.StatusCode <= http.StatusPartialContent {
		response, err := UnmarshalUserAliasesPutResponse(respBody)
		if err != nil {
			return UserAliasesPutResponse{}, nil, err
		}

		return response, nil, nil
	} else {
		response, err := UnmarshalErrorResponse(respBody)
		if err != nil {
			return UserAliasesPutResponse{}, nil, err
		}

		return UserAliasesPutResponse{}, &response, errors.New(response.Error)
	}
}

func (api *API) UserAliasesGet(id string) (UserAliasesGetResponse, *ErrorResponse, error) {
	url := fmt.Sprintf("%s/user/%s/aliases", api.BaseURL, id)

	resp, err := api.httpClient.Get(url)
	if err != nil {
		return UserAliasesGetResponse{}, nil, err
	}

	defer func(Body io.ReadCloser) {
		err := Body.Close()
		if err != nil {
			log.Fatal(err)
		}
	}(resp.Body)

	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return UserAliasesGetResponse{}, nil, err
	}

	if resp.StatusCode >= http.StatusOK && resp.StatusCode <= http.StatusPartialContent {
		response, err := UnmarshalUserAliasesGetResponse(respBody)
		if err != nil {
			return UserAliasesGetResponse{}, nil, err
		}

		return response, nil, nil
	} else {
		response, err := UnmarshalErrorResponse(respBody)
		if err != nil {
			return UserAliasesGetResponse{}, nil, err
		}

		return UserAliasesGetResponse{}, &response, errors.New(response.Error)
	}
}

func (api *API) UserAliasesDelete(id string) error {
	url := fmt.Sprintf("%s/user/%s/aliases", api.BaseURL, id)
	req, err := http.NewRequest(http.MethodDelete, url, nil)
	if err != nil {
		return err
	}

	resp, err := api.httpClient.Do(req)
	if err != nil {
		return err
	}

	defer func(Body io.ReadCloser) {
		err := Body.Close()
		if err != nil {
			log.Fatal(err)
		}
	}(resp.Body)

	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return err
	}

	if resp.StatusCode >= http.StatusOK && resp.StatusCode <= http.StatusPartialContent {
		return nil
	} else {
		response, err := UnmarshalErrorResponse(respBody)
		if err != nil {
			return err
		}

		return errors.New(response.Error)
	}
}

func (api *API) UserRolesPost(id string, policy UserRolesPostBody) (UserRolesPostResponse, *ErrorResponse, error) {
	url := fmt.Sprintf("%s/user/%s/roles", api.BaseURL, id)
	reqBody, err := json.Marshal(&policy)
	if err != nil {
		return UserRolesPostResponse{}, nil, err
	}

	resp, err := api.httpClient.Post(
		url,
		"application/json",
		bytes.NewBuffer(reqBody),
	)

	if err != nil {
		return UserRolesPostResponse{}, nil, err
	}

	defer func(Body io.ReadCloser) {
		err := Body.Close()
		if err != nil {
			log.Fatal(err)
		}
	}(resp.Body)

	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return UserRolesPostResponse{}, nil, err
	}

	if resp.StatusCode >= http.StatusOK && resp.StatusCode <= http.StatusPartialContent {
		response, err := UnmarshalUserRolesPostResponse(respBody)
		if err != nil {
			return UserRolesPostResponse{}, nil, err
		}

		return response, nil, nil
	} else {
		response, err := UnmarshalErrorResponse(respBody)
		if err != nil {
			return UserRolesPostResponse{}, nil, err
		}

		return UserRolesPostResponse{}, &response, errors.New(response.Error)
	}
}

func (api *API) UserRolesPut(id string, body UserRolesPutBody) (UserRolesPutResponse, *ErrorResponse, error) {
	url := fmt.Sprintf("%s/user/%s/roles", api.BaseURL, id)
	reqBody, err := json.Marshal(&body)
	if err != nil {
		return UserRolesPutResponse{}, nil, err
	}

	req, err := http.NewRequest(http.MethodPut,
		url,
		bytes.NewBuffer(reqBody),
	)
	if err != nil {
		return UserRolesPutResponse{}, nil, err
	}

	req.Header.Add("Content-Type", "application/json")
	resp, err := api.httpClient.Do(req)
	if err != nil {
		return UserRolesPutResponse{}, nil, err
	}

	defer func(Body io.ReadCloser) {
		err := Body.Close()
		if err != nil {
			log.Fatal(err)
		}
	}(resp.Body)

	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return UserRolesPutResponse{}, nil, err
	}

	if resp.StatusCode >= http.StatusOK && resp.StatusCode <= http.StatusPartialContent {
		response, err := UnmarshalUserRolesPutResponse(respBody)
		if err != nil {
			return UserRolesPutResponse{}, nil, err
		}

		return response, nil, nil
	} else {
		response, err := UnmarshalErrorResponse(respBody)
		if err != nil {
			return UserRolesPutResponse{}, nil, err
		}

		return UserRolesPutResponse{}, &response, errors.New(response.Error)
	}
}

func (api *API) UserRolesGet(id string) (UserRolesGetResponse, *ErrorResponse, error) {
	url := fmt.Sprintf("%s/user/%s/roles", api.BaseURL, id)

	resp, err := api.httpClient.Get(url)
	if err != nil {
		return UserRolesGetResponse{}, nil, err
	}

	defer func(Body io.ReadCloser) {
		err := Body.Close()
		if err != nil {
			log.Fatal(err)
		}
	}(resp.Body)

	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return UserRolesGetResponse{}, nil, err
	}

	if resp.StatusCode >= http.StatusOK && resp.StatusCode <= http.StatusPartialContent {
		response, err := UnmarshalUserRolesGetResponse(respBody)
		if err != nil {
			return UserRolesGetResponse{}, nil, err
		}

		return response, nil, nil
	} else {
		response, err := UnmarshalErrorResponse(respBody)
		if err != nil {
			return UserRolesGetResponse{}, nil, err
		}

		return UserRolesGetResponse{}, &response, errors.New(response.Error)
	}
}

func (api *API) UserTokenGet() (UserTokenGetResponse, *ErrorResponse, error) {
	url := fmt.Sprintf("%s/user/token", api.BaseURL)

	resp, err := api.httpClient.Get(url)
	if err != nil {
		return UserTokenGetResponse{}, nil, err
	}

	defer func(Body io.ReadCloser) {
		err := Body.Close()
		if err != nil {
			log.Fatal(err)
		}
	}(resp.Body)

	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return UserTokenGetResponse{}, nil, err
	}

	if resp.StatusCode >= http.StatusOK && resp.StatusCode <= http.StatusPartialContent {
		response, err := UnmarshalUserTokenGetResponse(respBody)
		if err != nil {
			return UserTokenGetResponse{}, nil, err
		}

		return response, nil, nil
	} else {
		response, err := UnmarshalErrorResponse(respBody)
		if err != nil {
			return UserTokenGetResponse{}, nil, err
		}

		return UserTokenGetResponse{}, &response, errors.New(response.Error)
	}
}

func (api *API) UserTokenPut() (UserTokenPutResponse, *ErrorResponse, error) {
	url := fmt.Sprintf("%s/user/token", api.BaseURL)

	req, err := http.NewRequest(http.MethodPut, url, nil)
	if err != nil {
		return UserTokenPutResponse{}, nil, err
	}

	req.Header.Add("Content-Type", "application/json")
	resp, err := api.httpClient.Do(req)
	if err != nil {
		return UserTokenPutResponse{}, nil, err
	}

	defer func(Body io.ReadCloser) {
		err := Body.Close()
		if err != nil {
			log.Fatal(err)
		}
	}(resp.Body)

	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return UserTokenPutResponse{}, nil, err
	}

	if resp.StatusCode >= http.StatusOK && resp.StatusCode <= http.StatusPartialContent {
		response, err := UnmarshalUserTokenPutResponse(respBody)
		if err != nil {
			return UserTokenPutResponse{}, nil, err
		}

		return response, nil, nil
	} else {
		response, err := UnmarshalErrorResponse(respBody)
		if err != nil {
			return UserTokenPutResponse{}, nil, err
		}

		return UserTokenPutResponse{}, &response, errors.New(response.Error)
	}
}

func (api *API) UserEnablePatch(id string) error {
	url := fmt.Sprintf("%s/user/%s/enable", api.BaseURL, id)

	req, err := http.NewRequest(http.MethodPatch,
		url,
		nil,
	)

	req.Header.Add("Content-Type", "application/json")
	resp, err := api.httpClient.Do(req)
	if err != nil {
		return err
	}

	defer func(Body io.ReadCloser) {
		err := Body.Close()
		if err != nil {
			log.Fatal(err)
		}
	}(resp.Body)

	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return err
	}

	if resp.StatusCode >= http.StatusOK && resp.StatusCode <= http.StatusPartialContent {
		return nil
	} else {
		response, err := UnmarshalErrorResponse(respBody)
		if err != nil {
			return err
		}

		return errors.New(response.Error)
	}
}

func (api *API) UserDisablePatch(id string) error {
	url := fmt.Sprintf("%s/user/%s/enable", api.BaseURL, id)

	req, err := http.NewRequest(http.MethodPatch,
		url,
		nil,
	)

	req.Header.Add("Content-Type", "application/json")
	resp, err := api.httpClient.Do(req)
	if err != nil {
		return err
	}

	defer func(Body io.ReadCloser) {
		err := Body.Close()
		if err != nil {
			log.Fatal(err)
		}
	}(resp.Body)

	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return err
	}

	if resp.StatusCode >= http.StatusOK && resp.StatusCode <= http.StatusPartialContent {
		return nil
	} else {
		response, err := UnmarshalErrorResponse(respBody)
		if err != nil {
			return err
		}

		return errors.New(response.Error)
	}
}

func (api *API) RequestAliasGet(id string) (RequestAliasGetResponse, *ErrorResponse, error) {
	url := fmt.Sprintf("%s/request/alias/%s", api.BaseURL, id)

	resp, err := api.httpClient.Get(url)
	if err != nil {
		return RequestAliasGetResponse{}, nil, err
	}

	defer func(Body io.ReadCloser) {
		err := Body.Close()
		if err != nil {
			log.Fatal(err)
		}
	}(resp.Body)

	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return RequestAliasGetResponse{}, nil, err
	}

	if resp.StatusCode >= http.StatusOK && resp.StatusCode <= http.StatusPartialContent {
		response, err := UnmarshalRequestAliasGetResponse(respBody)
		if err != nil {
			return RequestAliasGetResponse{}, nil, err
		}

		return response, nil, nil
	} else {
		response, err := UnmarshalErrorResponse(respBody)
		if err != nil {
			return RequestAliasGetResponse{}, nil, err
		}

		return RequestAliasGetResponse{}, &response, errors.New(response.Error)
	}
}

func (api *API) RequestAliasPatch(id string, body RequestAliasPatchBody) error {
	url := fmt.Sprintf("%s/request/alias/%s", api.BaseURL, id)
	reqBody, err := json.Marshal(&body)
	if err != nil {
		return err
	}

	req, err := http.NewRequest(http.MethodPatch,
		url,
		bytes.NewBuffer(reqBody),
	)

	req.Header.Add("Content-Type", "application/json")
	resp, err := api.httpClient.Do(req)
	if err != nil {
		return err
	}

	defer func(Body io.ReadCloser) {
		err := Body.Close()
		if err != nil {
			log.Fatal(err)
		}
	}(resp.Body)

	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return err
	}

	if resp.StatusCode >= http.StatusOK && resp.StatusCode <= http.StatusPartialContent {
		return nil
	} else {
		response, err := UnmarshalErrorResponse(respBody)
		if err != nil {
			return err
		}

		return errors.New(response.Error)
	}
}

func (api *API) RequestPolicyPost(id string, policy RequestPolicyPostBody) (RequestPolicyPostResponse, *ErrorResponse, error) {
	url := fmt.Sprintf("%s/request/policy/%s", api.BaseURL, id)
	reqBody, err := json.Marshal(&policy)
	if err != nil {
		return RequestPolicyPostResponse{}, nil, err
	}

	resp, err := api.httpClient.Post(
		url,
		"application/json",
		bytes.NewBuffer(reqBody),
	)

	if err != nil {
		return RequestPolicyPostResponse{}, nil, err
	}

	defer func(Body io.ReadCloser) {
		err := Body.Close()
		if err != nil {
			log.Fatal(err)
		}
	}(resp.Body)

	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return RequestPolicyPostResponse{}, nil, err
	}

	if resp.StatusCode >= http.StatusOK && resp.StatusCode <= http.StatusPartialContent {
		response, err := UnmarshalRequestPolicyPostResponse(respBody)
		if err != nil {
			return RequestPolicyPostResponse{}, nil, err
		}

		return response, nil, nil
	} else {
		response, err := UnmarshalErrorResponse(respBody)
		if err != nil {
			return RequestPolicyPostResponse{}, nil, err
		}

		return RequestPolicyPostResponse{}, &response, errors.New(response.Error)
	}
}

func (api *API) RequestsGet() (RequestsGetResponse, *ErrorResponse, error) {
	url := fmt.Sprintf("%s/requests", api.BaseURL)

	resp, err := api.httpClient.Get(url)
	if err != nil {
		return RequestsGetResponse{}, nil, err
	}

	defer func(Body io.ReadCloser) {
		err := Body.Close()
		if err != nil {
			log.Fatal(err)
		}
	}(resp.Body)

	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return RequestsGetResponse{}, nil, err
	}

	if resp.StatusCode >= http.StatusOK && resp.StatusCode <= http.StatusPartialContent {
		response, err := UnmarshalRequestsGetResponse(respBody)
		if err != nil {
			return RequestsGetResponse{}, nil, err
		}

		return response, nil, nil
	} else {
		response, err := UnmarshalErrorResponse(respBody)
		if err != nil {
			return RequestsGetResponse{}, nil, err
		}

		return RequestsGetResponse{}, &response, errors.New(response.Error)
	}
}
