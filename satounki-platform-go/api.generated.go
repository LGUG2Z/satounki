// Generated by satounki/common-gen

package satounki

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"log"
	"net/http"
)

func (api *API) CompaniesGet() (CompaniesGetResponse, *ErrorResponse, error) {
	url := fmt.Sprintf("%s/companies", api.BaseURL)

	resp, err := api.httpClient.Get(url)
	if err != nil {
		return CompaniesGetResponse{}, nil, err
	}

	defer func(Body io.ReadCloser) {
		err := Body.Close()
		if err != nil {
			log.Fatal(err)
		}
	}(resp.Body)

	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return CompaniesGetResponse{}, nil, err
	}

	if resp.StatusCode >= http.StatusOK && resp.StatusCode <= http.StatusPartialContent {
		response, err := UnmarshalCompaniesGetResponse(respBody)
		if err != nil {
			return CompaniesGetResponse{}, nil, err
		}

		return response, nil, nil
	} else {
		response, err := UnmarshalErrorResponse(respBody)
		if err != nil {
			return CompaniesGetResponse{}, nil, err
		}

		return CompaniesGetResponse{}, &response, errors.New(response.Error)
	}
}

func (api *API) CompanyGet(id string) (CompanyGetResponse, *ErrorResponse, error) {
	url := fmt.Sprintf("%s/company/%s", api.BaseURL, id)

	resp, err := api.httpClient.Get(url)
	if err != nil {
		return CompanyGetResponse{}, nil, err
	}

	defer func(Body io.ReadCloser) {
		err := Body.Close()
		if err != nil {
			log.Fatal(err)
		}
	}(resp.Body)

	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return CompanyGetResponse{}, nil, err
	}

	if resp.StatusCode >= http.StatusOK && resp.StatusCode <= http.StatusPartialContent {
		response, err := UnmarshalCompanyGetResponse(respBody)
		if err != nil {
			return CompanyGetResponse{}, nil, err
		}

		return response, nil, nil
	} else {
		response, err := UnmarshalErrorResponse(respBody)
		if err != nil {
			return CompanyGetResponse{}, nil, err
		}

		return CompanyGetResponse{}, &response, errors.New(response.Error)
	}
}

func (api *API) CompanyPut(id string, body CompanyPutRequest) (CompanyPutResponse, *ErrorResponse, error) {
	url := fmt.Sprintf("%s/company/%s", api.BaseURL, id)
	reqBody, err := json.Marshal(&body)
	if err != nil {
		return CompanyPutResponse{}, nil, err
	}

	req, err := http.NewRequest(http.MethodPut,
		url,
		bytes.NewBuffer(reqBody),
	)
	if err != nil {
		return CompanyPutResponse{}, nil, err
	}

	req.Header.Add("Content-Type", "application/json")
	resp, err := api.httpClient.Do(req)
	if err != nil {
		return CompanyPutResponse{}, nil, err
	}

	defer func(Body io.ReadCloser) {
		err := Body.Close()
		if err != nil {
			log.Fatal(err)
		}
	}(resp.Body)

	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return CompanyPutResponse{}, nil, err
	}

	if resp.StatusCode >= http.StatusOK && resp.StatusCode <= http.StatusPartialContent {
		response, err := UnmarshalCompanyPutResponse(respBody)
		if err != nil {
			return CompanyPutResponse{}, nil, err
		}

		return response, nil, nil
	} else {
		response, err := UnmarshalErrorResponse(respBody)
		if err != nil {
			return CompanyPutResponse{}, nil, err
		}

		return CompanyPutResponse{}, &response, errors.New(response.Error)
	}
}

func (api *API) CompanyPost(body CompanyPostRequest) (CompanyPostResponse, *ErrorResponse, error) {
	url := fmt.Sprintf("%s/company", api.BaseURL)
	reqBody, err := json.Marshal(&body)
	if err != nil {
		return CompanyPostResponse{}, nil, err
	}

	resp, err := api.httpClient.Post(
		url,
		"application/json",
		bytes.NewBuffer(reqBody),
	)

	if err != nil {
		return CompanyPostResponse{}, nil, err
	}

	defer func(Body io.ReadCloser) {
		err := Body.Close()
		if err != nil {
			log.Fatal(err)
		}
	}(resp.Body)

	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return CompanyPostResponse{}, nil, err
	}

	if resp.StatusCode >= http.StatusOK && resp.StatusCode <= http.StatusPartialContent {
		response, err := UnmarshalCompanyPostResponse(respBody)
		if err != nil {
			return CompanyPostResponse{}, nil, err
		}

		return response, nil, nil
	} else {
		response, err := UnmarshalErrorResponse(respBody)
		if err != nil {
			return CompanyPostResponse{}, nil, err
		}

		return CompanyPostResponse{}, &response, errors.New(response.Error)
	}
}

func (api *API) CompanyDelete(id string) error {
	url := fmt.Sprintf("%s/company/%s", api.BaseURL, id)
	req, err := http.NewRequest(http.MethodDelete, url, nil)
	if err != nil {
		return err
	}

	resp, err := api.httpClient.Do(req)
	if err != nil {
		return err
	}

	defer func(Body io.ReadCloser) {
		err := Body.Close()
		if err != nil {
			log.Fatal(err)
		}
	}(resp.Body)

	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return err
	}

	if resp.StatusCode >= http.StatusOK && resp.StatusCode <= http.StatusPartialContent {
		return nil
	} else {
		response, err := UnmarshalErrorResponse(respBody)
		if err != nil {
			return err
		}

		return errors.New(response.Error)
	}
}

func (api *API) PlatformTokenGet(id string) (PlatformTokenGetResponse, *ErrorResponse, error) {
	url := fmt.Sprintf("%s/token/%s", api.BaseURL, id)

	resp, err := api.httpClient.Get(url)
	if err != nil {
		return PlatformTokenGetResponse{}, nil, err
	}

	defer func(Body io.ReadCloser) {
		err := Body.Close()
		if err != nil {
			log.Fatal(err)
		}
	}(resp.Body)

	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return PlatformTokenGetResponse{}, nil, err
	}

	if resp.StatusCode >= http.StatusOK && resp.StatusCode <= http.StatusPartialContent {
		response, err := UnmarshalPlatformTokenGetResponse(respBody)
		if err != nil {
			return PlatformTokenGetResponse{}, nil, err
		}

		return response, nil, nil
	} else {
		response, err := UnmarshalErrorResponse(respBody)
		if err != nil {
			return PlatformTokenGetResponse{}, nil, err
		}

		return PlatformTokenGetResponse{}, &response, errors.New(response.Error)
	}
}

func (api *API) PlatformTokenPut(id string) (PlatformTokenPutResponse, *ErrorResponse, error) {
	url := fmt.Sprintf("%s/token/%s", api.BaseURL, id)
	req, err := http.NewRequest(http.MethodPut, url, nil)
	if err != nil {
		return PlatformTokenPutResponse{}, nil, err
	}

	req.Header.Add("Content-Type", "application/json")
	resp, err := api.httpClient.Do(req)
	if err != nil {
		return PlatformTokenPutResponse{}, nil, err
	}

	defer func(Body io.ReadCloser) {
		err := Body.Close()
		if err != nil {
			log.Fatal(err)
		}
	}(resp.Body)

	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return PlatformTokenPutResponse{}, nil, err
	}

	if resp.StatusCode >= http.StatusOK && resp.StatusCode <= http.StatusPartialContent {
		response, err := UnmarshalPlatformTokenPutResponse(respBody)
		if err != nil {
			return PlatformTokenPutResponse{}, nil, err
		}

		return response, nil, nil
	} else {
		response, err := UnmarshalErrorResponse(respBody)
		if err != nil {
			return PlatformTokenPutResponse{}, nil, err
		}

		return PlatformTokenPutResponse{}, &response, errors.New(response.Error)
	}
}
